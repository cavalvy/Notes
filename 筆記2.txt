vagrant reload --provision 

--save 会把依赖包名称添加到 package.json 文件 dependencies 键下。--save-dev 则添加到 package.json 文件 devDependencies 键下。
devDependencies是开发时的依赖，dependencies是发布后还需要依赖的模块（用--save）


vue：
	要在一个页面中使用另外的指令（非全局注册的指令，我们稍后介绍注册全局指令），我们需要先引入它。引入指令后，我们还需在 directives 中进行局部注册。

	"~bootstrap-sass/assets/fonts/bootstrap/" 中的波浪号（~）会将后面的内容当模块路径对待，默认指向 node_modules 目录。

	// src 的值是用反引号（`）标识的模板字符串，我们只需将变量放在 ${} 的大括号之中
        src: `${this.uploadsUrl}sites/ByvFbNlQYVwhvTyBgLdqitchoacDNznN.jpg`,

	scoped：添加此属性，则样式只在当前组件起作用；

	<router-view> 是一个功能组件，它会渲染路径匹配到的视图组件
	<router-link> 组件支持用户在具有路由功能的应用中导航，通过 <router-link> 上的 to="xxx" 属性可以指定目标地址，xxx这里是一个字符串对应路由配置中的 path。第一个参数是字符串或者一个描述地址对象
	当 <router-link> 被点击后，to 的值就会传到 router.push()
	
	ES6 允许我们使用箭头（=>）函数，因此下面两种写法是等价的：
	events.forEach((event) => {
		el.addEventListener(event, handler, false)
	})
	// 等价于
	events.forEach(function (event) {
		el.addEventListener(event, handler, false)
	})
	
	[...Array(num)] 中的 ... 是扩展运算符\对象展开运算符，我们可以用它展开一个数组或对象。将此对象混入到外部对象屬性中
	
	nextTick将回调延迟到下次 DOM 更新循环之后执行，nextTick 有一个全局方法 Vue.nextTick，在实例上使用 this.$nextTick，不要忘记 $
	
	注册全局组件需要使用 Vue.component，第一个参数 'xxx' 是组件名称，第二个参数 xxx 是一个对象或者函数
	注册全局指令需要使用 Vue.directive，第一个参数 'xxx' 是指令名称，第二个参数 xxx 是指令对象或者指令函数
	全局方法Vue.xxx = xxx对象或者函数Vue.xxx进行访问
	实例方法Vue.prototype.$xxx，通过this.$xxx 进行访问
	
	Vuex 是一个专为 Vue.js 应用开发的 状态管理模式 , 它可以集中管理应用所有组件的状态
	
	计算属性（computed）用来处理相对复杂的逻辑，并返回一个新的属性，它会根据其依赖的变化而变化
	
	当一个组件需要获取多个状态时候，将这些状态都一一声明就显得重复和冗余了。为了解决这个问题，我们可以使用 mapState 辅助函数帮我们生成對應属性，这样我们就能直接在模板里使用了。
	
	选项 / 数据
		props 是用来传递数据的.數據類型：String，Number，Boolean，Function，Object，Array，Symbol。props 的绑定默认是单向的，需要在父组件上添加 .sync 修饰符，以创建『双向绑定』
		watch 选项提供了一个方法来响应\監聽数据的变化
	
	钩子函数：
	bind：只调用一次，指令第一次绑定到元素时调用，在这里可以进行一次性的初始化设置；
		el：指令所绑定的元素，可以用来操作 DOM ；
		binding：一个对象，binding.value 表示指令的绑定值，如 v-title="'我是标题'" 中，绑定值为'我是标题'；
		vnode：Vue 编译生成的虚拟节点；
		oldVnode：上一个虚拟节点，仅在 update 和 componentUpdated 钩子中可用。
		<input v-validator:input.required="{ regex: /^[a-zA-Z]+\w*\s?\w*$/, error: '用户名要求以字母开头的单词字符' }">
			binding.name：指令名，不包括 v- 前缀，这里是 'validator' ；
			binding.value：指令的绑定值，这里是 { regex: /^[a-zA-Z]+\w*\s?\w*$/, error: '用户名要求以字母开头的单词字符' } ；
			binding.arg：传给指令的参数，这里是 'input' ；
			binding.modifiers：一个包含修饰符的对象，这里是 { required: true } ；
		
		
	inserted：被绑定元素插入父节点时调用；
	update：所在组件的 VNode（虚拟节点）更新时调用，但是可能发生在其子 VNode 更新之前；
	componentUpdated：指令所在组件的 VNode 及其子 VNode 全部更新后调用；
	unbind：只调用一次，指令与元素解绑时调用，在这里可以移除绑定的事件和其他数据；
	created 在实例创建完成后被立即调用，此时我们已经能访问实例的数据对象和方法了
	
	v-model 指令可以在表单 <input> 及 <textarea> 元素上创建双向数据绑定
	v-show 是一个条件渲染指令，它只切换元素 CSS 属性的 display

	
	$emit 用于触发当前实例上的事件，其第一个参数是事件名称，后面还可以附加若干参数。如果事件需要雙向綁定對應props事件。$emit第一個參數需要添加update:xxxx
	
	beforeRouteEnter(to, from, next) 是组件内的路由导航守卫，在确认渲染该组件的对应路由前调用。该守卫不能访问 this，但我们通过传一个回调给 next，就可以使用上面的 vm 来访问组件实例。路由未改变，beforeRouteEnter 不会被调用。
	守卫的参数说明如下：
		to：即将要进入的目标路由；
		from：当前导航正要离开的路由，from.name 是路由的名称，对应路由配置中的 name；
		next：一个用来 resolve 当前钩子的方法，需要调用该方法来确认或者中断导航；
			参数 to 和 from 都是 路由对象 （route object），表示当前激活的路由的状态信息，其常用的属性有
				name：路由的名称，如 'Register'；
				path：路由的路径，如 '/auth/register'；
				params：路由参数对象，如 { id: "1" }；
				query：URL 查询参数对象，如 { page: "1" }；
				meta：元信息对象，如 { auth: true }
	beforeEach(to, from, next) 注册一个全局前置守卫，它在导航被触发后调用，我们可以通过跳转或取消的方式守卫导航
	
js
	typeof:运算符把类型信息当作字符串返回.
	Object.entries 返回给定对象的键值对数组。
	
jq
	contains()方法检测一个元素包含在另一个元素之内：
	
html dom
	target 属性可设置或返回页面中所有链接的默认target屬性值
	isSameNode() 检查两个节点是否是相同节点
	
	
	
	
	

unlink()删除某文件
在unlink()函数前加上@是用来抑制错误信息输出的。

ad_positions: 廣告位置
ads：圖片
mails：發送郵件

---------------------------------
products：商品
product_specifications：規格（多對一）  商品
product_descriptions： 詳情（一對一）   商品
tags：標籤
product_tags： 商品 && 標籤（多對多）
product_images: 商品圖片 （一對一） 商品|| 規格
product_categories： 商品分類
product_comments： 商品評論（買過先可以評論）
product_advisories： 商品咨詢
brands： 商品品牌
--------------------------

carts： 購物車

-----------------------
countries： 國家（一對多）
zones： 地區 
area-groups: 區域名
zone_to_area_group：區域群組（關聯） 地區<->區域
couriers： 物流公司
courier_shipping_fees： 設置運費價格（區域群組）

--------------------------
pages： 其他頁面配置表。
redemption_centers： 自己提取表
seo_settings: seo設置表
worldhub_configs： 基本信息表

-------------------------
users:
userinfos: 详情（一对一）
user_addresses: 收货地址 （一对多）
user_collect_products： 收藏（一对多）
---------------------------------------------
orders：订单
order_products： 订单商品（一堆多） 商品的规格表
order_pays： 支付信息表
order_shippings： 配送信息
aftership_trackings： 推送wms前
order_close_reasons： 关闭订单

-----------------------------------
live_video_broadcasts： 直播信息
lvb_products： 直播商品信息（多对多） 商品

------------------------------------
roles: 角色表
role_user： 用户角色表（多对多） 用户
permissions： 权限
role_permission：角色权限（多对多）

laravel -----增刪改查
vue--------頁面 

vue-》laravel接口
接口返回數據-》 
vue -》處理頁面














