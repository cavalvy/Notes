功能性的以worldhub為準，外觀性的以新模板為準，優先使用餓了麼ui!!!



mateInfo能无害修改body属性

所有表单提交要加全局锁，案例在登录页面
proxy-request代购页

-------------

vagrant reload --provision 

--save 会把依赖包名称添加到 package.json 文件 dependencies 键下。--save-dev 则添加到 package.json 文件 devDependencies 键下。
devDependencies是开发时的依赖，dependencies是发布后还需要依赖的模块（用--save）


vue：

	axios用來獲取json數據的包,是一个基于 Promise 的 HTTP 库，可以在浏览器和 node.js 中使用；
	
	
	要在一个页面中使用另外的指令（非全局注册的指令，我们稍后介绍注册全局指令），我们需要先引入它。引入指令后，我们还需在 directives 中进行局部注册。

	"~bootstrap-sass/assets/fonts/bootstrap/" 中的波浪号（~）会将后面的内容当模块路径对待，默认指向 node_modules 目录。

	// src 的值是用反引号（`）标识的模板字符串，我们只需将变量放在 ${} 的大括号之中
        src: `${this.uploadsUrl}sites/ByvFbNlQYVwhvTyBgLdqitchoacDNznN.jpg`,

	scoped：添加此属性，则样式只在当前组件起作用；

	<router-view> 是一个功能组件，它会渲染路径匹配到的视图组件
	<router-link> 组件支持用户在具有路由功能的应用中导航，通过 <router-link> 上的 to="xxx" 属性可以指定目标地址，xxx这里是一个字符串对应路由配置中的 path。第一个参数是字符串或者一个描述地址对象
	当 <router-link> 被点击后，to 的值就会传到 router.push()
	
	在组件上使用 v-for 指令进行渲染的时候，需要添加 key。它可以方便 Vue 跟踪每个节点的身份，从而重用和重新排序现有元素。每一项的 key 应该是惟一的.
	代码里for(const xx of xxx)
	

	Router
		mode：路由模式，默认值 'hash' 使用井号（ # ）作路由，值 'history' 可利用 History API 来完成页面跳转且无须重新加载.
		linkExactActiveClass 的值是一个类名，用来添加到与当前路由对应的 <router-link> 上，以显示当前精确激活的 <router-link>，其默认值是 'router-link-exact-active'.
	
	
	ES6 
		允许我们使用箭头函数（=>），因此下面写法是等价的：
			events.forEach((event) => {
				el.addEventListener(event, handler, false)
			})
			// 等价于
			events.forEach(function (event) {
				el.addEventListener(event, handler, false)
			})
			var f = a = > a

			//等同于
			var f = function(a){
				return a;  
			}
			//无形参
			var f = () => 5;
			// 等同于
			var f = function () { return 5 };
			
		[...Array(num)] 中的 ... 是扩展运算符\对象展开运算符，我们可以用它展开一个数组或对象。将此对象混入到外部对象屬性中
		Object.assign是ES6新添加的接口,可以接收多个参数，第一个参数是目标对象，后面的都是源对象，assign方法将多个原对象的属性和方法都合并到了目标对象上面，如果在这个过程中出现同名的属性（方法），后合并的属性（方法）会覆盖之前的同名属性（方法）。如下：
		// 合并新旧个人信息，等价于 user = Object.assign({}, stateUser, user)
		user = { ...stateUser, ...user }
	
	nextTick将回调延迟到下次 DOM 更新循环之后执行，nextTick 有一个全局方法 Vue.nextTick，在实例上使用 this.$nextTick，不要忘记 $
	
	注册全局组件需要使用 Vue.component，第一个参数 'xxx' 是组件名称，第二个参数 xxx 是一个对象或者函数
	注册全局指令需要使用 Vue.directive，第一个参数 'xxx' 是指令名称，第二个参数 xxx 是一个对象或者函数
	注册全局过滤器需要使用 Vue.filter，第一个参数 'xxx' 是指令名称，第二个参数 xxx 是一个对象或者函数
	全局方法Vue.xxx = xxx对象或者函数Vue.xxx进行访问
	实例方法Vue.prototype.$xxx，通过this.$xxx 进行访问
	
	Vuex 是一个专为 Vue.js 应用开发的 状态管理模式 , 它可以集中管理应用所有组件的状态
	
	计算属性（computed）用来处理相对复杂的逻辑，并返回一个新的属性，它会根据其依赖的变化而变化
	
	当一个组件需要获取多个状态时候，将这些状态都一一声明就显得重复和冗余了。为了解决这个问题，我们可以使用 mapState 辅助函数帮我们生成對應属性，这样我们就能直接在模板里使用了。
	// 引入 mapState 辅助函数 import { mapState } from 'vuex'
	
	Vuex.Store
		state：共享的状态，我们不能直接更改状态，但是可以像 store.state.user 这样访问一个状态；
		mutations：更改状态的方法，我们可以在这里更改状态，调用方法是像 store.commit('UPDATE_USER', user) 这样提交一个事件类型，这里不能包含异步操作；
		actions：类似于 mutations，但我们不在这里直接更改状态，而是提交前面的 mutation，调用方法是 store.dispatch('xxx') 这样分发一个事件，这里可以包含异步操作；
		Getters：当需要从仓库的 state 中派生出一些状态的时候，我们就可以定义 Getter，你可以认为它是仓库的计算属性。Getter 的第一个参数是 state，通过它可以访问仓库的状态，它的第二个参数是 getters，通过它可以访问仓库的派生状态.
			mapGetters 辅助函数仅仅是将 store 中的 getter 映射到局部计算属性
		Module:Vuex 允许我们将 store 分割成模块
		
		mapActions 辅助函数将组件的 methods 映射为 store.dispatch 调用.
		
		
		Action 函数接受一个与 store 实例具有相同方法和属性的 context 对象，因此你可以调用 context.commit 提交一个 mutation，或者通过 context.state 和 context.getters 来获取 state 和 getters
		
	Vue.extend 用来创建一个新『子类』，其参数是一个包含组件选项的对象。
	使用 new 关键字可以创建一个新的 Message 实例，因为没有指定 el 挂载目标，当前实例处于『未挂载』状态。如：const vm = new Message()
	使用 vm.$mount() 手动地挂载一个未挂载的实例，并返回当前实例，此时我们能从实例获取 $el。如：vm.$mount().$el
		$el和$mout两者在使用效果上没有任何区别，都是为了将实例化后的vue挂载到指定的dom元素中。
		如果在实例化vue的时候指定el，则该vue将会渲染在此el对应的dom中，反之，若没有指定el，则vue实例会处于一种“未挂载”的状态，此时可以通过$mount来手动执行挂载。
	vm.$on 用来监听当前实例上的自定义事件，其第一个参数是事件名称或包含事件名称的数组，其第二个参数是回调函数，该函数会接收触发函数的所有参数。
	vm.$refs一个对象，持有注册过 ref 特性 的所有 DOM 元素和组件实例。ref 被用来给元素或子组件注册引用信息。引用信息将会注册在父组件的 $refs 对象上。如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素；
	
	<keep-alive> 元素将其动态组件包裹起来，让标签的组件实例能够被在它们第一次被创建的时候缓存下来。
	
	选项 / 数据
		props 是用来传递数据的.數據類型：String，Number，Boolean，Function，Object，Array，Symbol。props 的绑定默认是单向的，需要在父组件上添加 .sync 修饰符，以创建『双向绑定』
		required: true，我们指定当前 prop 为必须传入的数据.
		props 中数组和对象的默认值，应当由一个工厂函数返回
		数组default: () => []，对象default: () => ({})
		
		watch 选项提供了一个方法来响应\監聽数据的变化
			通常会在两个路由都渲染相同的组件时监听 '$route' 来得知路由参数的变化,这是因为 Vue 会复用组件实例，以导致组件内的部分钩子不再被调用。如：我们的『编辑文章』和 『创作文章』都使用 Create.vue 组件，当我们从『编辑文章』导航到『创作文章』时（在编辑文章页面点击创作文章按钮），beforeRouteEnter 就不会被调用，所以我们需要监听 '$route'，以响应路由参数的变化。
			immediate：其值为 true，将立即以表达式 currentPage 的当前值触发回调函数;如（handler）
			回调第一个参数是表达式当前值，可以有第二个参数，是表达式的旧值。
			
	
	钩子函数：
	bind：只调用一次，指令第一次绑定到元素时调用，在这里可以进行一次性的初始化设置；
		el：指令所绑定的元素，可以用来操作 DOM ；
		binding：一个对象，binding.value 表示指令的绑定值，如 v-title="'我是标题'" 中，绑定值为'我是标题'；
		vnode：Vue 编译生成的虚拟节点；
		oldVnode：上一个虚拟节点，仅在 update 和 componentUpdated 钩子中可用。
		<input v-validator:input.required="{ regex: /^[a-zA-Z]+\w*\s?\w*$/, error: '用户名要求以字母开头的单词字符' }">
			binding.name：指令名，不包括 v- 前缀，这里是 'validator' ；
			binding.value：指令的绑定值，这里是 { regex: /^[a-zA-Z]+\w*\s?\w*$/, error: '用户名要求以字母开头的单词字符' } ；
			binding.arg：传给指令的参数，这里是 'input' ；
			binding.modifiers：一个包含修饰符的对象，这里是 { required: true } ；
		
		
	inserted：被绑定元素插入父节点时调用；
	update：所在组件的 VNode（虚拟节点）更新时调用，但是可能发生在其子 VNode 更新之前；
	componentUpdated：指令所在组件的 VNode 及其子 VNode 全部更新后调用；
	unbind：只调用一次，指令与元素解绑时调用，在这里可以移除绑定的事件和其他数据；
	created 在实例创建完成后被立即调用，此时我们已经能访问实例的数据对象和方法了
	mounted 钩子在元素挂载到实例之后调用.(元素指頁面標簽).
	
	事件修饰符，常用的事件修饰符有：
		.self：当 event.target 是当前元素自身时触发处理函数；
		.stop：阻止事件继续传播；
		.prevent：阻止事件默认行为；
		.capture：使用事件捕获模式；
		.once：事件只会触发一次；
		不常用：
		.native：在一个组件的根元素上直接监听一个原生事件
	
	
	v-model 指令可以在表单 <input> 及 <textarea> 元素上创建双向数据绑定，v-model会忽略所有表单元素的 value、checked 和 selected 的初始值，而使用 Vue 实例的数据，所以我们需要在 data 里声明对应的初始值.
	使用 .lazy 修饰符，可以使其值在 change 事件后才同步
		在单选选择框中使用 v-model，其值是一个静态字符串，对应选中项的 value，如 'male'；
			<select v-model="sex" class="form-control">
			  <option value="">未选择</option>
			  <option value="male">男</option>
			  <option value="female">女</option>
			</select>
		在多个复选框使用 v-model，其值是一个数组，数组项对应已选项的 value，如 ['运动']；
			<label class="checkbox-inline">
			  <input v-model="hobbies" value="运动" type="checkbox"> 运动
			</label>
			<label class="checkbox-inline">
			  <input v-model="hobbies" value="健身" type="checkbox"> 健身
			</label>

	v-show 是一个条件渲染指令，它只切换元素 CSS 属性的 display
	v-text 更新元素的 textContent.<span v-text="msg"></span>和<span>{{msg}}</span>一樣
	
	$emit 用于触发当前实例上的事件，其第一个参数是事件名称，后面还可以附加若干参数。如果事件需要雙向綁定對應props事件。$emit第一個參數需要添加update:xxxx
	
	beforeRouteEnter(to, from, next) 是组件内的路由导航守卫，在确认渲染该组件的对应路由前调用。该守卫不能访问 this，但我们通过传一个回调给 next，就可以来访问组件实例。路由未改变，beforeRouteEnter 不会被调用。
	守卫的参数说明如下：
		to：即将要进入的目标路由；
		from：当前导航正要离开的路由，from.name 是路由的名称，对应路由配置中的 name；
		next：一个用来 resolve 当前钩子的方法，需要调用该方法来确认或者中断导航；
			参数 to 和 from 都是 路由对象 （route object），表示当前激活的路由的状态信息，其常用的属性有
				name：路由的名称，如 'Register'；
				path：路由的路径，如 '/auth/register'；
				params：路由参数对象，如 { id: "1" };//to.params.id
				query：URL 查询参数对象，如 { page: "1" }；
				meta：元信息对象，如 { auth: true }
				
	vue文件被复用后beforeRouteEnter不会被再次调用，此时，我们需要监听 '$route' 以根据路由参数的变化，重新获取对应数据。watch: { '$route'(to){} }
	
	beforeEach(to, from, next) 注册一个全局前置守卫，它在导航被触发后调用，我们可以通过跳转或取消的方式守卫导航.
	
	afterEach 注册全局后置钩子，它在导航被确认后调用，因此它不接受 next 函数也不会改变导航本身。
	
	beforeRouteLeave 是组件内的守卫，在离开该组件的对应路由时调用，此时可以访问 this，需要使用 next() 确认导航。
	
	beforeRouteUpdate 当前路由改变，该组件被复用时调用。需要使用 next() 确认导航。也可以通过监听 '$route' 来代替 beforeRouteUpdate。
	
	如果当前路由含有默认子路由，则不需要为当前路由指定 name，要导航到当前路由，可以使用默认子路由的 name，如 router.push({ name: 'EditProfile' })
	
	路由路径path中 :xxxx 以冒号开头，代表的是该项参数是动态的，它能匹配任何值
	
	过滤器（filter）常用于格式化文本，以管道符号（ | ）表示。过滤器可以在双括号差值和 v-bind 表达式中使用，比如：
	<abbr :date="date | filterA | moment">{{ date | moment('from', { startOf: 'minute' }) }}</abbr>
	过滤器函数总接收表达式的值 (之前的操作链的结果，如上面 date | filterA 的结果) 作为第一个参数。
	
	参数 ...rest 使用了剩余语法，我们使用它将一个不定数量的参数表示为一个数组。
	
	@click 绑定一个点击事件处理器，对应 methods 选项下的方法， @click 是 v-on:click 指令的缩写；
	
	//插槽slot
	<span slot='label'>在span中插入label标签
	作用域插槽:slot-scope. 在父组件中， 使用具有 slot-scope 的 <template> 元素，来接收从子组件传递过来的 props.
	
	标签中的tag 属性让它生成 <div> 标签
	
	路由中的alias 选项用来指定别名，它可以是一个字符串或者数组。我们指定别名为 '/xxx' 后，那么来自该路径的访问实际上就是对path的访问。
	
	Getter 的第一个参数是 state，通过它可以访问仓库的状态，它的第二个参数是 getters，通过它可以访问仓库的派生状态。
	
	//切换到新路由时，想要页面滚到顶部，或者是保持原先的滚动位置使用：滚动行为
	scrollBehavior 只在支持 history.pushState 的浏览器中可用，history.pushState 用来在浏览历史中添加一条新的记录。
	
	在监听键盘事件时，我们经常需要检查常见的键值。Vue 允许为 v-on 在监听键盘事件时添加按键修饰符。
	常用按键修饰符：
		.enter：回车键；
		.tab：制表键；
		.delete：删除和退格键；
		.esc：中止键；
		.space：空格键；
		.up：向上方向键；
		.down：向下方向键；
		.left：向左方向键；
		.right：向右方向键；
	
	 
	需要将 path: '/search' 这类路由配置放到 /:user 的前面，以使其具有更高的优先级，因为 /:user 是动态的，它能够匹配到 /search 从而忽略其后面的配置
	引入xxx配置
	new Vue({
		xxx
	})
	
	$event 在内联语句处理器中访问原始的 DOM 事件.
	
js
	六种主要类型（语言类型）：注意是小写，开头大写就是内置对象。
	• string
	• number
	• boolean
	• null
	• undefined
	• object
	简单基本类型（string、boolean、number、null 和 undefined）本身并不是对象。null 有时会被当作一种对象类型，
	但是这其实只是语言本身的一个 bug，即对 null 执行typeof null 时会返回字符串 "object"。1 实际上，null 本身是基本类型。
	原理是这样的，不同的对象在底层都表示为二进制，在 JavaScript 中二进制前三位都为 0 的话会被判
	断为 object 类型，null 的二进制表示是全 0，自然前三位也是 0，所以执行 typeof 时会返回“object”。
	
	typeof:运算符把类型信息当作字符串返回.
	Object.entries 返回给定对象的键值对数组。
	定義全局變量window.xxx
	shift() 方法用于把数组的第一个元素从其中删除，并返回移除后的第一个元素的值。
	filter也是一个常用的操作，它用于把Array的某些元素过滤掉，然后返回剩下的元素。
	splice(index,howmany,item1,.....,itemX) 方法向/从数组中添加/删除项目，然后返回被删除的项目。
	Promise 对象表示一个异步操作的最终状态及其返回的值，因此我们可以在 .then 的回调函数里获取返結果
	some方法用于检测数组中的元素是否满足指定条件.如果有一个元素满足条件，则表达式返回true , 剩余的元素不会再执行检测
	FormData：利用FormData对象,我们可以通过JavaScript使用XMLHttpRequest对象一些键值对来模拟一系列表单控件
	xx.toLowerCase()转小写
	ES6为Array增加了from函数用来将其他对象转换成数组。
	slice() 方法可从已有的数组中返回选定的元素。（start,end不包括该元素）该方法并不会修改数组，而是返回一个子数组。如果想删除数组中的一段元素，应该使用方法 Array.splice()。
	Array.from() 方法从一个类似数组或可迭代对象中创建一个新的数组实例。
	
jq
	contains()方法检测一个元素包含在另一个元素之内：
	
html dom
	target 属性可设置或返回页面中所有链接的默认target屬性值
	isSameNode() 检查两个节点是否是相同节点
	
css
	媒体查询@media适用于
	

Mock.js： 一个用于生成随机数据和拦截 Ajax 请求的工具。
axios 是一个基于 Promise 的 HTTP 库，我们可以用它在浏览器中发起 Ajax 请求。
lodash:这是一个具有一致接口、模块化、高性能等特性的 JavaScript 工具库
vue-loader 是一个 webpack 的 loader. 特性：
	默认支持 ES2015；
	允许对 Vue 组件的组成部分使用其它 webpack loader，比如对 <style> 使用 Sass 和对 <template> 使用 Jade；
	.vue 文件中允许自定义节点，然后使用自定义的 loader 进行处理；
	把 <style> 和 <template> 中的静态资源当作模块来对待，并使用 webpack loader 进行处理；
	对每个组件模拟出 CSS 作用域；
	支持开发期组件的热重载。
	
vuex-loading 有助于你管理应用中的多个加载状态。这个插件适用于状态变化频繁且复杂的实时应用程序。
	
webpack 是一个模块打包工具。它将一堆文件中的每个文件都作为一个模块，找出它们的依赖关系，将它们打包为可部署的静态资源。

jQuery Zoom圖片變焦包。即鼠標已過去會變大圖像。
	treeview樹形插件
	attr() 方法设置或返回被选元素的属性值。
	val() 方法返回或设置被选元素的值。
	is()判断
	:checked 选择器选取所有选中的复选框或单选按钮。
	trigger() 方法触发被选元素的指定事件类型。
	:eq() 选择器选取带有指定 index 值的元素。
	css() 方法设置或返回被选元素的一个或多个样式属性
	each(集合, function(index,element){})foreach方法
	extend() 函数用于将一个或多个对象的内容合并到目标对象。
	modal()弹出层插件。
	preventDefault() 方法阻止元素发生默认的行为（例如，当点击提交按钮时阻止对表单的提交）。
	
bootstrap:
	swal()是sweetalert彈出框

xxtea.js是node.js的加密算法庫。

epic-spinners动图仅CSS。使用方便。VUEJS集成。

對比工具:beyo

Velocity 是一个简单易用、高性能、功能丰富的轻量级JS动画库。

typeahead.js輸入框自动提示补全提示

Swiper是纯javascript打造的滑动特效插件，面向手机、平板电脑等移动终端。
Vue-Awesome-Swiper基于 Swiper4、适用于 Vue 的轮播组件，支持服务端渲染和单页应用。

vue-highlight-text:如搜索关键字结果的商品名称关键字高亮。

process 对象是一个 global （全局变量），提供有关信息，控制当前 Node.js 进程。作为一个对象，它对于 Node.js 应用程序始终是可用的，故无需使用 require()。
process（进程）其实就是存在nodejs中的一个全局变量。然后呢，咱们可以通过这个所谓的进程能拿到一些有意思的东西。
env 属性返回一个包含用户环境信息的对象

metaInfo：
	vue-meta-info 是一个基于vue 2.0的插件，它会让你更好的管理你的 app 里面的 meta 信息。你可以直接 在组件内设置 metaInfo 便可以自动挂载到你的页面中。如果你需要随着数据的变化，自动更新你的title、meta等信息，那么用此 插件也是再合适不过了。 当然，有时候我们也可能会遇到让人头疼的SEO问题，那么使用此插件配合 prerender-spa-plugin 也是再合适不过了
	
text-decoration:none;去除a標籤默認樣式

柯里化（Currying）是把接受多个参数的函数变换成接受一个单一参数(最初函数的第一个参数)的函数，并且返回接受余下的参数且返回结果的新函数的技术。

~ 是按位取反运算符,把每个二进制位取反，0 变 1， 1 变 0。
~~能类型转换,转换成数字类型:
	~~true == 1
	~~false == 0
	~~[] == 0
	~~undefined ==0
	~~!undefined == 1
	~~null == 0
	~~!null == 1

unlink()删除某文件
在unlink()函数前加上@是用来抑制错误信息输出的。


箭头函数不使用 this 的四种标准规则，而是根据外层（函数或者全局）作用域来决定 this。箭头函数的绑定无法被修改。（new 也不行！）它用更常见的词法作用域取代了传统的 this 机制。








paypal:
买家：vergil@worldhub.market 密码：worldhub
买家：buyer-paypal@worldhub.market 密码：worldhub
商家：paypal-facilitator@worldhub.market 密码：worldhub





worldhub数据库
ad_positions: 廣告位置
ads：圖片
mails：發送郵件

---------------------------------
products：商品
product_specifications：規格（多對一）  商品
product_descriptions： 詳情（一對一）   商品
tags：標籤
product_tags： 商品 && 標籤（多對多）
product_images: 商品圖片 （一對一） 商品|| 規格
product_categories： 商品分類
product_comments： 商品評論（買過先可以評論）
product_advisories： 商品咨詢
brands： 商品品牌
--------------------------

carts： 購物車

-----------------------
countries： 國家（一對多）
zones： 地區 
area-groups: 區域名
zone_to_area_group：區域群組（關聯） 地區<->區域
couriers： 物流公司
courier_shipping_fees： 設置運費價格（區域群組）

--------------------------
pages： 其他頁面配置表。
redemption_centers： 自己提取表
seo_settings: seo設置表
worldhub_configs： 基本信息表

-------------------------
users:
userinfos: 详情（一对一）
user_addresses: 收货地址 （一对多）
user_collect_products： 收藏（一对多）
---------------------------------------------
orders：订单
order_products： 订单商品（一堆多） 商品的规格表
order_pays： 支付信息表
order_shippings： 配送信息
aftership_trackings： 推送wms前
order_close_reasons： 关闭订单

-----------------------------------
live_video_broadcasts： 直播信息
lvb_products： 直播商品信息（多对多） 商品

------------------------------------
roles: 角色表
role_user： 用户角色表（多对多） 用户
permissions： 权限
role_permission：角色权限（多对多）

laravel -----增刪改查
vue--------頁面 

vue-》laravel接口
接口返回數據-》 
vue -》處理頁面




申请ID：
dj0zaiZpPTRGbDZNMXhmWDBKSSZzPWNvbnN1bWVyc2VjcmV0Jng9OGE-
揭秘：
e47b6c0424e55027b198534154115508efd4a1d7
yahoo账号
vergil@vip.163.com
revs.hk


amazon
访问密钥 ID:AKIAJBOJSD4ICKYEN2FQ
私有访问密钥:
LYsOccXAxvpQlOJxuaKNQx4IROC8/snlgBG43G7j
AWS 账户 ID: 9458-9936-0945
规范用户 ID: ff11fd11baf812d92216c0c9b7477e6d6fd9baf080fa90d381463745420d1a9d
用户=ProductAdvertisingAPI-user
Access_Key_ID=AKIAIQUGTZEEAAJILYGA
私有访问密钥=RAr8eO1JnrllDL79fKiWZx2QqBHNMV/wJDQyclpF

AKIAJGWXLMU5TCDTCJZA
nMovGqqIzdXfcO/fI2dUyoCJ1SEk1U2RjNMbUe6n


运行命令:npm install 或者 npm install –S会自动将package.json中的模块安装到node-modules文件夹下。
npm uninstall xxx 删除xxx模块；
.eslintrc.js里的rules里添加"linebreak-style": [0 ,"error", "windows"]防止windows机下的vue文件换行符报错。

前台新项目时app.config.js.example复制一份去掉后缀
API/laravel新项目时.env.example复制一份去掉后缀
laravel新项目沒有vendor文件需要composer install，並且執行下面
git submodule init
git submodule update用来跟新子模块（即models文件夹）

composer dumpautoload  自动加载命令执行成功

php -r ""运行php命令

學習ES6語法
前台樣式在variables.scss

存在問題未解決！！！！
1.會員中心-我的收藏：商品庫存顯示功能未做。
3.請求代購的自取id輸不進數據庫
4.請求代購的價錢api沒有返回






